---
name: Integration
on:
  push:
    branches:
      - main
  pull_request:

env:
  IMAGE_NAME: iypetrov/ghtmx

jobs:
  publish-test-image-job:
    runs-on: ubuntu-latest

    permissions:
      packages: write

    steps:

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push to GHCR
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ghcr.io/${{ env.IMAGE_NAME }}:${{ github.run_id }}
          target: build-stage
          secret-envs: API_MAJOR_VERSION=0, API_MINOR_VERSION=0, API_PATCH_VERSION=0
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  unit-test-job:
    needs: [ publish-test-image-job ]
    runs-on: ubuntu-latest

    permissions:
      packages: read

    steps:

      - name: Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run unit tests
        run: docker run --rm ghcr.io/${{ env.IMAGE_NAME }}:${{ github.run_id }} go test -v ./app/...

  linter-job:
    needs: [ publish-test-image-job ]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'
          cache: false

      - name: Linter
        uses: golangci/golangci-lint-action@v4
        with:
          version: v1.54

  sonar-scan-job:
    needs: [ publish-test-image-job ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: SonarCloud scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          exit-code: 0
          ignore-unfixed: true
          args: >
            -Dsonar.organization=iypetrov
            -Dsonar.projectKey=iypetrov_ghtmx

  snyk-scan-job:
    needs: [ publish-test-image-job ]
    runs-on: ubuntu-latest

    steps:
       - uses: actions/checkout@master
       - name: Snyc scan
         uses: snyk/actions/golang@master
         env:
           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
         with:
           args: >
            --severity-threshold=high

  trivy-scan-job:
    needs: [ publish-test-image-job ]
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: read
      security-events: write

    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull image to scan
        run: docker pull ghcr.io/${{ env.IMAGE_NAME }}:${{ github.run_id }}

      - name: Trivy scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/${{ env.IMAGE_NAME }}:${{ github.run_id }}
          exit-code: 0
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'